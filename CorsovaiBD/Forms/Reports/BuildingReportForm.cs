// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using MySqlConnector;
using NPOI.OpenXml4Net.OPC;
using NPOI.XWPF.UserModel;
using static NPOI.HSSF.UserModel.HeaderFooter;
using System.Collections.Generic;
using System.Data;
using System.IO;

namespace CorsovaiBD
{
    public partial class BuildingReportForm : NSViewController
    {
        public Dictionary<string, string> Building = new Dictionary<string, string>();

        public BuildingReportForm(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            try
            {
                using var connection = new MySqlConnection(MainController.builder.ConnectionString);
                connection.Open();

                var query = $@"
    SELECT b.ID, b_type.Purpose, b.Legality, b.DateCreation, b.SquareALL, b.Inhabited, w.Name, b.Cost, b.Storeys, a.City, a.Street, a.HouseNumber, d.Name, a.BlockNumber
    FROM Buildings b
    JOIN Building_type b_type ON b.Building_type_id = b_type.Id
    JOIN Addresses a ON b.AddressId = a.Id
    JOIN Wall_Material w ON b.Wall_Material_Id = w.Id
    JOIN District d ON a.DistrictId = d.Id
    WHERE b.ID = {MainController.selectedRowId}";

                var adapter = new MySqlDataAdapter(query, connection);
                var dataSet = new DataSet();
                adapter.Fill(dataSet);

                var table = dataSet.Tables[0];
                var values = table.Rows[0].ItemArray;
                idField.Cell.Title = values[0].ToString();
                typeField.Cell.Title = values[1].ToString();
                if (values[2].ToString() != "1")
                {
                    legalityField.Cell.State = NSCellStateValue.Off;
                }

                dateField.Cell.Title = DateTime.Parse(values[3].ToString()).ToString();
                squareField.Cell.Title = values[4].ToString();
                if (values[5].ToString() != "1")
                {
                    inhabitedField.Cell.State = NSCellStateValue.Off;
                }
                wallField.Cell.Title = values[6].ToString();
                costField.Cell.Title = values[7].ToString();
                storeyField.Cell.Title = values[8].ToString();
                cityField.Cell.Title = values[9].ToString();
                streetField.Cell.Title = values[10].ToString();
                houseField.Cell.Title = values[11].ToString();
                districtField.Cell.Title = values[12].ToString();
                blockField.Cell.Title = values[13].ToString();

              
            }
            catch (Exception ex)
            {
                Console.Write(ex.Message);
            }


        }
        partial void createReport(NSObject sender)
        {
            try {
                if (inhabitedField.Cell.State == NSCellStateValue.Off)
                {
                    Building.Add("Inhabited", "Нет");
                }
                else
                {
                    Building.Add("Inhabited", "Да");
                }
                if (legalityField.Cell.State == NSCellStateValue.Off)
                {
                    Building.Add("Legality", "Нет");
                }
                else
                {
                    Building.Add("Legality", "Да");
                }
                Building.Add("Id", idField.Cell.Title);
                Building.Add("BuildingType", typeField.Cell.Title);
                Building.Add("DateCreation", dateField.Cell.Title);
                Building.Add("SquareAll", squareField.Cell.Title);

                Building.Add("WallMaterial", wallField.Cell.Title);

                Building.Add("Cost", costField.Cell.Title);
                Building.Add("Storeys", storeyField.Cell.Title);

                Building.Add("City", cityField.Cell.Title);
                Building.Add("Street", streetField.Cell.Title);
                Building.Add("HouseNumber", houseField.Cell.Title);
                Building.Add("District", districtField.Cell.Title);
                Building.Add("BlockNumber", blockField.Cell.Title);


                var openFileDialog = new NSOpenPanel();
                openFileDialog.CanChooseFiles = true;
                openFileDialog.CanChooseDirectories = false;
                openFileDialog.AllowedFileTypes = new string[] { "docx" };

                if (openFileDialog.RunModal() == (int)NSModalResponse.OK)
                {
                    var templateFilePath = openFileDialog.Url.Path;

                    var saveFileDialog = new NSSavePanel();
                    saveFileDialog.CanCreateDirectories = true;
                    saveFileDialog.AllowedFileTypes = new string[] { "docx" };

                    if (saveFileDialog.RunModal() == (int)NSModalResponse.OK)
                    {
                        var saveFilePath = saveFileDialog.Url.Path;
                        var wordDocument = new XWPFDocument(OPCPackage.Open(templateFilePath));

                        foreach (var field in Building)
                        {
                            ReplaceWordStab(field.Key, field.Value, wordDocument);
                        }


                        wordDocument.Write(new FileStream(saveFilePath, FileMode.Create));
                    }

                }
            
            }catch (Exception ex)
            {
                Console.Write(ex.Message);
            }
        }

        public static void ReplaceWordStab(string stabToReplace, string text, XWPFDocument wordDocument)
        {
            foreach (var paragraph in wordDocument.Paragraphs)
            {
                foreach (var run in paragraph.Runs)
                {
                    if (run.Text.Contains(stabToReplace))
                    {
                        run.SetText(run.Text.Replace(stabToReplace, text));
                    }

                }
            }
        }

    }
}

